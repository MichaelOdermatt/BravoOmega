<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stats

hp = 100; //health
dp = 0; //Depression
hd = 100; //hydration
hg = 0; //Hunger
ar = 0; //arousal
fr = 0; //fear
bt = 36; //body temp
timeM = 0;
timeS = 0;
skinRed = 0;

statStr = "HP:" + string(floor(hp)) + "#DP:" + string(floor(dp)) + "#HD:" + string(floor(hd)) + "#HG:" + string(floor(hg)) + "#AR:" + string(ceil(ar)) + "#FR:" + string(ceil(fr)) + "#BT:" + string(bt) + "°";

//inventory
food[0] = 0; //moldy pineapple
food[1] = 0; //canned hotdog
food[2] = 0; //candy bar
food[3] = 0; //fast food
food[4] = 0; //yellow substance
food[5] = 0; //stringy meat
food[6] = 0; //rocks
food[7] = 0; //glowing aura
food[8] = 1; //survival ration

//name food
foodn[0] = "Moldy Pineapple";
foodn[1] = "Canned Hotdog"; //canned hotdog
foodn[2] = "Candy Bar"; //candy bar
foodn[3] = "Fast Food"; //fast food
foodn[4] = "Yellow Substance"; //yellow substance
foodn[5] = "Stringy Meat"; //stringy meat
foodn[6] = "Rocks"; //rocks
foodn[7] = "Glowing Aura"; //glowing aura
foodn[8] = "Survival Rations"; //survival ration

drink[0] = 0; //bottled mist
drink[1] = 1; //bottled water
drink[2] = 0; //energy drink
drink[3] = 0; //blood
drink[4] = 0; //pulsating liquid
drink[5] = 0; //coffee
drink[6] = 0; //fresh milk
drink[7] = 0; //battery acid

drinkn[0] = "Bottled Mist";
drinkn[1] = "Bottled Water";
drinkn[2] = "Energy Drinks";
drinkn[3] = "Blood";
drinkn[4] = "Pulsating Liquid";
drinkn[5] = "Coffee";
drinkn[6] = "Fresh Milk";
drinkn[7] = "Battery Acid";

//items
item[0] = 0;
item[1] = 0;
item[2] = 1;

itemn[0] = "Greasy Magazine";
itemn[1] = "Jar Of Teeth";
itemn[2] = "Coffee Filter";
//command stats
tp = 3;

//set alarm
alarm[0] = 60
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//increment seconds
timeS++;
alarm[0] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//reset seconds to zero
if (timeS=60) {
    timeM++;
    timeS = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///get hungry and thirsty and other shit like that
if obj_textCont.event==0 {
    if dp&lt;50 {
        hg += 0.005
        hd -= 0.005
    } else if (dp&gt;=50) {
        hg += 0.01
        hd -= 0.01
    } else if (dp&gt;=75) {
        hg += 0.025
        hd -= 0.025
    } else if (dp&gt;=90) {
        hg += 0.05
        hd -= 0.05
    }
    
    if (ar&gt;=25) {
        hg += 0.0005
        hp += 0.001
    }
    
    if (bt&gt;=40) {
        ar += 0.001
    }
    
    if (hg&gt;=99) {
        hp -= 0.025;
    }
    
    if (hd&lt;=1) {
        hp -= 0.025;
    }
    if (hp&lt;=0.1) {
        obj_endCont.timeS = timeS;
        obj_endCont.timeM = timeM;
        if (!instance_exists(obj_fadeBlack)) {
            instance_create(x,y,obj_fadeBlack);
        }
    }
    if (ar&lt;=35) {
        dp += 0.0025
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///pause alarm
if obj_textCont.event!=0 {
    if alarm[0] != -1 {
        tme = alarm[0]
        alarm[0] = -1
    }
} else {
    if (alarm[0]==-1) {
        alarm[0] = tme;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw Stats and time and *paused*
draw_set_color(obj_textCont.txtClr);
draw_set_alpha(1);
draw_set_font(obj_textCont.fnt2);
scr_clampStats();
//draw stats
statStr = "HP:" + string(floor(hp)) + "#DP:" + string(floor(dp)) + "#HD:" + string(floor(hd)) + "#HG:" + string(floor(hg)) + "#AR:" + string(ceil(ar)) + "#FR:" + string(ceil(fr)) + "#BT:" + string(bt) + "°";
draw_text(234,32,statStr);
//draw time
//if time is not two digits, make it two digits
if (timeM&lt;10) {
    dtimeM = "0" + string(timeM)
} else {
    dtimeM = string(timeM)
}

if (timeS&lt;10) {
    dtimeS = "0" + string(timeS)
} else {
    dtimeS = string(timeS)
}
draw_text(390+56,10, dtimeM + ":" + dtimeS);

//draw paused

if obj_textCont.event!=0 {
    draw_text((room_width/2)-string_width("*PAUSED*")/2,(room_height/2)-string_height("*PAUSED*")/2,"*PAUSED*");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
