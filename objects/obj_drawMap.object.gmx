<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>animationSpd = 0.05;
animation = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw

//draw border
draw_set_color(obj_mapCont.borderClr);
draw_rectangle(32,288,224,480,1);
draw_rectangle(30,286,226,482,1);
animation += animationSpd; // for an animated sprite make the subimage equal to the variable animation
if (animation&gt;8) {
    animation = 0;
}

//draw text
    draw_set_alpha(1);
    draw_set_font(obj_mapCont.fnt1);
    draw_text(35,483,"X:" + string(obj_mapData.x) + " Y:" + string(obj_mapData.y) ); //draw x and y
    scr_clampStats();
    draw_text(234,288,"RA:" + string(floor(obj_mapData.radiatorHp))); //draw HP
    //draw engine on/0ff
    if (obj_car.spd==1) {
        draw_text(154,483,"Engine On"); //draw engin on/off
    } else {
        draw_text(146,483,"Engine Off"); //draw engin on/off
    }
    draw_set_alpha(1);

obj_mapData.drt[502,500] = 0;    
    
// draw map textures
for (i = -5; i&lt;5; i++) {
    for (j = -5; j&lt;5; j++) {
        if (obj_mapData.x&lt;=495)&amp;&amp;(obj_mapData.x&gt;=-495)&amp;&amp;(obj_mapData.y&lt;=495)&amp;&amp;(obj_mapData.y&gt;=-495) {
            if  (obj_mapData.drt[obj_mapData.x+500+i,obj_mapData.y+500+j]==1) {         //draw dirt
                depth = -99
                draw_sprite(sp_dirt,obj_mapData.drtt[obj_mapData.x+500+i,obj_mapData.y+500+j],141+(i)*17.5,372-(j)*17.5);
                depth = 0;
            } else if  (obj_mapData.drt[obj_mapData.x+500+i,obj_mapData.y+500+j]==2) {  //draw rocks
                depth = -99
                image_speed = 0.5;
                draw_sprite(sp_rock,obj_mapData.drtt[obj_mapData.x+500+i,obj_mapData.y+500+j],141+(i)*17.5,372-(j)*17.5);
                depth = 0;
            } else if  (obj_mapData.drt[obj_mapData.x+500+i,obj_mapData.y+500+j]==3) {  //draw exit
                depth = -99
                draw_sprite(sp_cargo,animation,141+(i)*17.5,372-(j)*17.5);
                depth = 0;
            } else if  (obj_mapData.drt[obj_mapData.x+500+i,obj_mapData.y+500+j]==4) {  //draw exit
                depth = -99
                draw_sprite(sp_event,animation,141+(i)*17.5,372-(j)*17.5);
                depth = 0;
            } else if  (obj_mapData.drt[obj_mapData.x+500+i,obj_mapData.y+500+j]==5) {  //draw rocks
                depth = -99
                draw_sprite(sp_brock,obj_mapData.drtt[obj_mapData.x+500+i,obj_mapData.y+500+j],141+(i)*17.5,372-(j)*17.5);
                depth = 0;
            }
        } 
    }
}

//if code exists draw no signal
if obj_displayCont.codeExists == 1 {
    draw_set_color(c_black);
    draw_rectangle(33,289,223,479,0);
    draw_set_color(obj_mapCont.borderClr);
    draw_text(128-string_width("LOCATION LOST")/2,322,"LOCATION LOST");
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw out of bounds 

if (obj_mapData.y&lt;=-496)||(obj_mapData.y&gt;=496)||(obj_mapData.x&lt;=-496)||(obj_mapData.x&gt;=496) {
    draw_set_color(obj_mapCont.borderClr);
    draw_set_font(obj_mapCont.fnt1);
    draw_text(128-string_width("OUT OF BOUNDS")/2,322,"OUT OF BOUNDS");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
